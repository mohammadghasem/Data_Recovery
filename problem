Merge sort is one of the classical sorting algorithms.
Suppose we implemented this algorithm and for debugging when merging two sorted sections when comparing two elements,
one from the first half of the array (elements number 0 to half the length of the array)
and one from the second half of the array (elements from half to the end array), 
if the element of the first half of the array was smaller at the time of adding this element to the final array,
the letter L is printed, and if the element of the second half of the array was smaller, the letter R is printed.
Below is the code of our merge function:
-------------------------------------------------------
def merge(arr1, arr2):
    result = []
    while (len(arr1) > 0) and (len(arr2) > 0):
        if arr1[0] < arr2[0]:
            print("L",  end="")
            result.append(arr1[0])
            arr1.pop(0)
        else:
            print("R",  end="")
            result.append(arr2[0])
            arr2.pop(0)
    for elem in arr1:
        result.append(elem)
    for elem in arr2:
        result.append(elem)
    return result
---------------------------------------------------------
We had saved an important permutation of numbers 1 to n on our computer,
which was lost due to a disk failure. Fortunately, these numbers were sorted once by the algorithm above,
and the information we had printed to debug the algorithm (letters R and L) was saved in a separate disk and was not lost.

Write an algorithm that recovers the sequence of lost numbers by taking the number n and the sequence corresponding to debug.

Pay attention to the implementation of the integration sorting algorithm when dividing the array into two halves,
when the length of the numerical array was odd, we consider the right half as larger.
